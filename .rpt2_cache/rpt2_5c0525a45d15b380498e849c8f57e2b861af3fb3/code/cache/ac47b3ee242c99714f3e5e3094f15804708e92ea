{"map":"{\"version\":3,\"file\":\"text-input.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/text-input.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { AbstractControl } from './abstract-control';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged, shareReplay } from 'rxjs/operators';\r\nimport { startsWith, endsWith } from 'lodash';\r\nimport * as inputMask from 'vanilla-text-mask';\r\nimport * as JSON5 from 'json5';\r\nexport class TextInput extends AbstractControl {\r\n    constructor() {\r\n        super();\r\n        this.value$ = new BehaviorSubject('');\r\n        this.mask$ = new BehaviorSubject(null);\r\n        this.inputMaskController = null;\r\n        this.value = this.value$.asObservable().pipe(distinctUntilChanged(), shareReplay(1));\r\n        const foundInput = this.querySelector('input');\r\n        if (!foundInput) {\r\n            throw new Error('<rx-text-input> not found child <input>');\r\n        }\r\n        this.input = foundInput;\r\n        this.name$.asObservable()\r\n            .subscribe(name => this.input.setAttribute('name', name));\r\n        this.mask$.asObservable()\r\n            .subscribe(mask => {\r\n            this.inputMaskController = this.updateInputMaskController(this.inputMaskController, mask);\r\n        });\r\n    }\r\n    static get observedAttributes() {\r\n        return [\r\n            ...AbstractControl.observedAttributes,\r\n            'validator-mask',\r\n            'mask',\r\n        ];\r\n    }\r\n    setMask(mask) {\r\n        this.mask$.next(mask);\r\n    }\r\n    updateMaskAttribute(mask) {\r\n        if (mask === null) {\r\n            this.setMask(null);\r\n            return;\r\n        }\r\n        const maskStringArray = JSON5.parse(mask);\r\n        const maskArray = maskStringArray.map((element) => {\r\n            if (startsWith(element, '/') && endsWith(element, '/')) {\r\n                return new RegExp(element);\r\n            }\r\n            return element;\r\n        });\r\n        this.setMask(maskArray);\r\n    }\r\n    updateInputMaskController(currentController, mask) {\r\n        if (currentController !== null) {\r\n            currentController.destroy();\r\n        }\r\n        if (mask !== null) {\r\n            return inputMask.maskInput({\r\n                inputElement: this.input,\r\n                mask,\r\n            });\r\n        }\r\n        return null;\r\n    }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (newValue === oldValue) {\r\n            return;\r\n        }\r\n        switch (name) {\r\n            case 'mask':\r\n                this.updateMaskAttribute(newValue);\r\n                break;\r\n            default: super.attributeChangedCallback(name, oldValue, newValue);\r\n        }\r\n    }\r\n}\r\ncustomElements.define('rx-text-input', TextInput);\r\n//# sourceMappingURL=text-input.js.map","dts":{"name":"/home/pashok/projects/reactive-forms/dist/types/text-input.d.ts","writeByteOrderMark":false,"text":"import { AbstractControl } from './abstract-control';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nexport declare class TextInput extends AbstractControl<string> {\r\n    value: Observable<string>;\r\n    protected value$: BehaviorSubject<string>;\r\n    private mask$;\r\n    private input;\r\n    private inputMaskController;\r\n    constructor();\r\n    static readonly observedAttributes: string[];\r\n    setMask(mask: Array<string | RegExp> | null): void;\r\n    private updateMaskAttribute;\r\n    private updateInputMaskController;\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n"}}
