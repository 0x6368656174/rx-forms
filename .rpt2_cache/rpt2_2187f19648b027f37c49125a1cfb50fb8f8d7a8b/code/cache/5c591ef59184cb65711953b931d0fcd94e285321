{"map":"{\"version\":3,\"file\":\"text-input.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/text-input.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { AbstractControl } from './abstract-control';\r\nimport { BehaviorSubject, combineLatest, fromEvent } from 'rxjs';\r\nimport { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';\r\nimport { startsWith, endsWith, isString } from 'lodash';\r\nimport { parse } from 'json5';\r\nimport { Validators } from './validators';\r\nimport { pattern } from './validator-pattern';\r\nimport { createTextMaskInputElement } from 'text-mask-core';\r\nexport class TextInput extends AbstractControl {\r\n    constructor() {\r\n        super();\r\n        this.value$ = new BehaviorSubject('');\r\n        this.mask$ = new BehaviorSubject(null);\r\n        // private inputMaskController: InputMaskController|null = null;\r\n        this.hasPatternValidator = false;\r\n        this.value = this.value$.asObservable().pipe(distinctUntilChanged(), shareReplay(1));\r\n        const foundInput = this.querySelector('input');\r\n        if (!foundInput) {\r\n            throw new Error('<rx-text-input> not found child <input>');\r\n        }\r\n        this.input = foundInput;\r\n        // this.input.addEventListener('keydown', event => console.log(this.input.value));\r\n        this.name$.asObservable()\r\n            .subscribe(name => this.input.setAttribute('name', name));\r\n        this.textInputMaskElement$ = this.mask$.asObservable().pipe(map(mask => {\r\n            if (!mask) {\r\n                return null;\r\n            }\r\n            return createTextMaskInputElement({\r\n                inputElement: this.input,\r\n                mask,\r\n            });\r\n        }));\r\n        const onInput$ = fromEvent(this.input, 'input');\r\n        combineLatest(onInput$, this.textInputMaskElement$).subscribe(([event, textInputMaskElement]) => {\r\n            if (textInputMaskElement === null) {\r\n                this.value$.next(this.input.value);\r\n                return;\r\n            }\r\n            textInputMaskElement.update(this.input.value);\r\n            this.value$.next(this.input.value);\r\n        });\r\n    }\r\n    setMask(mask) {\r\n        this.mask$.next(mask);\r\n    }\r\n    updateMaskAttribute(mask) {\r\n        if (mask === null) {\r\n            this.setMask(null);\r\n            return;\r\n        }\r\n        let maskStringArray;\r\n        try {\r\n            maskStringArray = parse(`{mask: ${mask.replace(/\\\\/g, '\\\\\\\\')}}`).mask;\r\n        }\r\n        catch (e) {\r\n            throw new Error(`Error on parse mask \"${mask}\", check syntax. Mask must contains array of strings and RegExp's. RegExp must be in quotes ('/\\\\d/').`);\r\n        }\r\n        if (maskStringArray.some(element => !isString(element))) {\r\n            throw new Error(`Error on parse mask \"${mask}\", check syntax. Mask must contains array of strings and RegExp's. RegExp must be in quotes ('/\\\\d/').`);\r\n        }\r\n        const maskArray = maskStringArray.map((element) => {\r\n            if (startsWith(element, '/') && endsWith(element, '/')) {\r\n                return new RegExp(element.substr(1, element.length - 2));\r\n            }\r\n            return element;\r\n        });\r\n        this.setMask(maskArray);\r\n    }\r\n    setPatternValidator(regExp) {\r\n        if (this.hasPatternValidator) {\r\n            this.removeValidator(Validators.Pattern);\r\n            this.hasPatternValidator = false;\r\n        }\r\n        if (regExp) {\r\n            this.addValidator(Validators.Pattern, pattern(this, regExp));\r\n            this.hasPatternValidator = true;\r\n        }\r\n    }\r\n    updateValidationPatternAttribute(validationPatter) {\r\n        if (validationPatter) {\r\n            let regExp;\r\n            if (startsWith(validationPatter, '/') && endsWith(validationPatter, '/')) {\r\n                regExp = new RegExp(validationPatter.substr(1, validationPatter.length - 2));\r\n            }\r\n            else {\r\n                regExp = new RegExp(validationPatter);\r\n            }\r\n            this.setPatternValidator(regExp);\r\n        }\r\n        else {\r\n            this.setPatternValidator(null);\r\n        }\r\n    }\r\n    static get observedAttributes() {\r\n        return [\r\n            ...AbstractControl.observedAttributes,\r\n            'validator-pattern',\r\n            'mask',\r\n        ];\r\n    }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (newValue === oldValue) {\r\n            return;\r\n        }\r\n        switch (name) {\r\n            case 'mask':\r\n                this.updateMaskAttribute(newValue);\r\n                break;\r\n            case 'validator-pattern':\r\n                this.updateValidationPatternAttribute(newValue);\r\n                break;\r\n            default: super.attributeChangedCallback(name, oldValue, newValue);\r\n        }\r\n    }\r\n}\r\ncustomElements.define('rx-text-input', TextInput);\r\n//# sourceMappingURL=text-input.js.map","dts":{"name":"/home/pashok/projects/reactive-forms/dist/types/text-input.d.ts","writeByteOrderMark":false,"text":"import { AbstractControl } from './abstract-control';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nexport declare class TextInput extends AbstractControl<string> {\r\n    value: Observable<string>;\r\n    protected value$: BehaviorSubject<string>;\r\n    private mask$;\r\n    private textInputMaskElement$;\r\n    private input;\r\n    private hasPatternValidator;\r\n    constructor();\r\n    setMask(mask: Array<string | RegExp> | null): void;\r\n    private updateMaskAttribute;\r\n    setPatternValidator(regExp: RegExp | null): void;\r\n    private updateValidationPatternAttribute;\r\n    static readonly observedAttributes: string[];\r\n    attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null): void;\r\n}\r\n"}}
