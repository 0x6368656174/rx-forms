{"map":"{\"version\":3,\"file\":\"abstract-control.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/abstract-control.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n/**\r\n * Контрол формы\r\n */\r\nexport class AbstractControl extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.pristine$ = new BehaviorSubject(true);\r\n        this.untouched$ = new BehaviorSubject(true);\r\n        this.validators$ = new BehaviorSubject(new Map());\r\n        this.name$ = new BehaviorSubject('');\r\n        this.pristine = this.pristine$.asObservable();\r\n        this.dirty = this.pristine.pipe(map(value => !value));\r\n        this.untouched = this.untouched$.asObservable();\r\n        this.touched = this.untouched$.pipe(map(value => !value));\r\n        this.valid = this.validators$.asObservable().pipe(switchMap(validators => {\r\n            const validators$ = Array.from(validators).map(([key, value]) => value.validator);\r\n            return combineLatest(validators$);\r\n        }), map(validList => {\r\n            return !validList.some(valid => !valid);\r\n        }));\r\n        this.invalid = this.valid.pipe(map(value => !value));\r\n        this.validationErrors = this.validators$.asObservable().pipe(switchMap(validators => {\r\n            const validators$ = Array.from(validators).map(([key, value]) => {\r\n                return value.validator.pipe(map(valid => valid ? null : value.message));\r\n            });\r\n            return combineLatest(validators$);\r\n        }), map(messageList => {\r\n            return messageList.filter((message) => message !== null);\r\n        }));\r\n    }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (newValue === oldValue) {\r\n            return;\r\n        }\r\n        switch (name) {\r\n            case 'name':\r\n                this.updateName(newValue);\r\n                break;\r\n        }\r\n    }\r\n    updateName(name) {\r\n        this.name$.next(name);\r\n    }\r\n    /**\r\n     * Устанавлиает значение контрола\r\n     *\r\n     * @param value Значение контрола\r\n     */\r\n    setValue(value) {\r\n        this.value$.next(value);\r\n    }\r\n    /**\r\n     * Устанавлиает валидатор\r\n     *\r\n     * @param validator Валидатор, Observable, которая геренирует true, если контрол проходит валидацию,\r\n     *                  или false, если не проходит\r\n     * @param message Сообщение об ошибке валидации\r\n     *\r\n     * @return Возвращает Уникальный symbol для созданого валидатора\r\n     */\r\n    addValidator(validator, message) {\r\n        const next = new Map(this.validators$.getValue());\r\n        const symbol = Symbol();\r\n        next.set(symbol, { validator, message });\r\n        this.validators$.next(next);\r\n        return symbol;\r\n    }\r\n    /**\r\n     * Удаляет валидатор\r\n     *\r\n     * @param validator Уникальный symbol валидатора, который вернул addValidator()\r\n     */\r\n    removeValidator(validator) {\r\n        const next = new Map(this.validators$.getValue());\r\n        next.delete(validator);\r\n        this.validators$.next(next);\r\n    }\r\n    markAsTouched() {\r\n        this.untouched$.next(false);\r\n    }\r\n    martAsDirty() {\r\n        this.pristine$.next(false);\r\n    }\r\n}\r\n//# sourceMappingURL=abstract-control.js.map","dts":{"name":"/home/pashok/projects/reactive-forms/dist/types/abstract-control.d.ts","writeByteOrderMark":false,"text":"import { BehaviorSubject, Observable } from 'rxjs';\r\n/**\r\n * Контрол формы\r\n */\r\nexport declare abstract class AbstractControl<T> extends HTMLElement {\r\n    /** Значение контрола */\r\n    abstract value: Observable<T>;\r\n    /** Признак того, что контрол проходит валидацию */\r\n    valid: Observable<boolean>;\r\n    /** Признак того, что контрол не проходит валидацию */\r\n    invalid: Observable<boolean>;\r\n    /** Признак того, что контрол \"грязный\", т.е. его значение менялось програмно */\r\n    dirty: Observable<boolean>;\r\n    /** Признак того, что контрол \"чистый\", т.е. его значение не менялось програмно */\r\n    pristine: Observable<boolean>;\r\n    /** Признак того, что контрол принимал и терял фокус */\r\n    touched: Observable<boolean>;\r\n    /** Признак того, что контрол не принимал и не терял фокус */\r\n    untouched: Observable<boolean>;\r\n    /** Список ошибок валидации */\r\n    validationErrors: Observable<string[]>;\r\n    protected abstract value$: BehaviorSubject<T>;\r\n    protected pristine$: BehaviorSubject<boolean>;\r\n    protected untouched$: BehaviorSubject<boolean>;\r\n    protected validators$: BehaviorSubject<Map<symbol, {\r\n        validator: Observable<boolean>;\r\n        message: string;\r\n    }>>;\r\n    protected name$: BehaviorSubject<string>;\r\n    protected constructor();\r\n    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;\r\n    private updateName;\r\n    /**\r\n     * Устанавлиает значение контрола\r\n     *\r\n     * @param value Значение контрола\r\n     */\r\n    setValue(value: T): void;\r\n    /**\r\n     * Устанавлиает валидатор\r\n     *\r\n     * @param validator Валидатор, Observable, которая геренирует true, если контрол проходит валидацию,\r\n     *                  или false, если не проходит\r\n     * @param message Сообщение об ошибке валидации\r\n     *\r\n     * @return Возвращает Уникальный symbol для созданого валидатора\r\n     */\r\n    addValidator(validator: Observable<boolean>, message: string): symbol;\r\n    /**\r\n     * Удаляет валидатор\r\n     *\r\n     * @param validator Уникальный symbol валидатора, который вернул addValidator()\r\n     */\r\n    removeValidator(validator: symbol): void;\r\n    protected markAsTouched(): void;\r\n    protected martAsDirty(): void;\r\n}\r\n"}}
